[
    {
        "llm_name": "DeepSeek V3",
        "function_type": "dijkstra",
        "response_text": "Название: Проверка работы алгоритма на стандартном графе\nID: TC_DIJKSTRA_001\nПредусловия:\n• Граф представлен матрицей смежности:[\n    [0, 4, 0, 0, 0, 0, 0, 8, 0],\n    [4, 0, 8, 0, 0, 0, 0, 11, 0],\n    [0, 8, 0, 7, 0, 4, 0, 0, 2],\n    [0, 0, 7, 0, 9, 14, 0, 0, 0],\n    [0, 0, 0, 9, 0, 10, 0, 0, 0],\n    [0, 0, 4, 14, 10, 0, 2, 0, 0],\n    [0, 0, 0, 0, 0, 2, 0, 1, 6],\n    [8, 11, 0, 0, 0, 0, 1, 0, 7],\n    [0, 0, 2, 0, 0, 0, 6, 7, 0]\n]\n• vertex_count = 9\n• src = 0 (стартовая вершина)\nШаги:\n1. Инициализировать граф с заданной матрицей.\n2. Вызвать dijkstra(0).\n3. Получить массив расстояний.\nОжидаемый результат:\n[0, 4, 12, 19, 21, 11, 9, 8, 14]\n\nНазвание: Проверка работы на вырожденном графе (1 вершина)\nID: TC_DIJKSTRA_002\nПредусловия:\n• Граф: [[0]]\n• vertex_count = 1\n• src = 0\nШаги:\n1. Инициализировать граф.\n2. Вызвать dijkstra(0).\nОжидаемый результат:\n[0]\n\nНазвание: Проверка обработки несвязного графа\nID: TC_DIJKSTRA_003\nПредусловия:\n• Граф:[\n    [0, 3, 0],\n    [3, 0, 0],\n    [0, 0, 0]\n]\n• vertex_count = 3\n• src = 0\nШаги:\n1. Инициализировать граф.\n2. Вызвать dijkstra(0).\nОжидаемый результат:\n[0, 3, inf]\n\nНазвание: Проверка реакции на отрицательные веса\nID: TC_DIJKSTRA_004\nПредусловия:\n• Граф:[\n    [0, -1, 0],\n    [-1, 0, 2],\n    [0, 2, 0]\n]\n• vertex_count = 3\n• src = 0\nШаги:\n1. Инициализировать граф.\n2. Вызвать dijkstra(0).\nОжидаемый результат:\n• Либо [0, -1, 1] (если алгоритм поддерживает отрицательные веса).\n• Либо ошибка (если реализация не допускает отрицательных весов).\n\nНазвание: Проверка работы на полностью связанном графе\nID: TC_DIJKSTRA_005\nПредусловия:\n• Граф:[\n    [0, 5, 5],\n    [5, 0, 5],\n    [5, 5, 0]\n]\n• vertex_count = 3\n• src = 0\nШаги:\n1. Инициализировать граф.\n2. Вызвать dijkstra(0).\nОжидаемый результат:\n[0, 5, 5]\n\nНазвание: Проверка обработки петель\nID: TC_DIJKSTRA_006\nПредусловия:\n• Граф:[\n    [0, 10, 0],\n    [10, 0, 20],\n    [0, 20, 0]\n]\n• vertex_count = 3\n• src = 1\nШаги:\n1. Инициализировать граф.\n2. Вызвать dijkstra(1).\nОжидаемый результат:\n[10, 0, 20]"
    },
    {
        "llm_name": "ChatGPT-4o",
        "function_type": "dijkstra",
        "response_text": "Название: Проверка кратчайших путей в связном графе без отрицательных весов\nID: TC_DJK_001\nПредусловия:\n• vertex_count = 5\n• graph:[\n  [0, 10, 0, 5, 0],\n  [0, 0, 1, 2, 0],\n  [0, 0, 0, 0, 4],\n  [0, 3, 9, 0, 2],\n  [7, 0, 6, 0, 0]\n]\n• src = 0\nШаги:\n1. Создать экземпляр графа с указанной матрицей.\n2. Вызвать dijkstra(0).\n3. Сохранить и сравнить результат.\nОжидаемый результат: [0, 8, 9, 5, 7]\n\nНазвание: Проверка поведения, если исходная вершина не имеет рёбер\nID: TC_DJK_002\nПредусловия:\n• vertex_count = 3\n• graph:[\n  [0, 0, 0],\n  [0, 0, 1],\n  [0, 0, 0]\n]\n• src = 0\nШаги:\n1. Создать граф с изолированной вершиной 0.\n2. Вызвать dijkstra(0).\nОжидаемый результат: [0, inf, inf]\n\nНазвание: Проверка работы на полном графе\nID: TC_DJK_003\nПредусловия:\n• vertex_count = 4\n• graph:[\n  [0, 1, 4, 7],\n  [1, 0, 2, 8],\n  [4, 2, 0, 3],\n  [7, 8, 3, 0]\n]\n• src = 1\nШаги:\n1. Инициализировать полный граф с симметричными весами.\n2. Вызвать dijkstra(1).\nОжидаемый результат: [1, 0, 2, 5]\n\nНазвание: Проверка поведения на графе с одной вершиной\nID: TC_DJK_004\nПредусловия:\n• vertex_count = 1\n• graph = [[0]]\n• src = 0\nШаги:\n1. Создать граф с одной вершиной.\n2. Вызвать dijkstra(0).\nОжидаемый результат: [0]\n\nНазвание: В графе есть вершины, недостижимые из исходной\nID: TC_DJK_005\nПредусловия:\n• vertex_count = 4\n• graph:[\n  [0, 5, 0, 0],\n  [0, 0, 3, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]\n]\n• src = 0\nШаги:\n1. Создать граф с недостижимой вершиной 3.\n2. Вызвать dijkstra(0).\nОжидаемый результат: [0, 5, 8, inf]\n\nНазвание: Передана некорректная вершина как источник\nID: TC_DJK_006\nПредусловия:\n• vertex_count = 3\n• graph = [...] (любая корректная матрица)\n• src = 5 (некорректно)\nШаги:\n1. Вызвать dijkstra(5).\nОжидаемый результат:\nИсключение IndexError или соответствующее сообщение об ошибке.\n\nНазвание: Проверка поведения при наличии 0 весов в графе\nID: TC_DJK_007\nПредусловия:\n• vertex_count = 3\n• graph:[\n  [0, 0, 1],\n  [0, 0, 0],\n  [0, 1, 0]\n]\n• src = 0\nШаги:\n1. Вызвать dijkstra(0).\nОжидаемый результат: [0, 2, 1] (через 2 → 1)"
    },
    {
        "llm_name": "Claude Sonnet 4",
        "function_type": "dijkstra",
        "response_text": "Название: Проверка корректности вычисления кратчайших расстояний в связном взвешенном графе\nID: TC_DIJKSTRA_001\nПредусловия:\n• Создан объект класса Graph с vertex_count = 4\n• Граф представлен матрицей смежности: \n• [0, 1, 4, 0]\n• [0, 0, 2, 5]\n• [0, 0, 0, 1]\n• [0, 0, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с заданной матрицей смежности\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить корректность каждого элемента массива\nОжидаемый результат:\n[0, 1, 3, 4]\n\nНазвание: Проверка работы алгоритма на графе с единственной вершиной\nID: TC_DIJKSTRA_002\nПредусловия:\n• Создан объект класса Graph с vertex_count = 1\n• Граф представлен матрицей смежности: [[0]]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с одной вершиной\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что расстояние до самой себя равно 0\nОжидаемый результат:\n[0]\n\nНазвание: Проверка обработки недостижимых вершин в несвязном графе\nID: TC_DIJKSTRA_003\nПредусловия:\n• Создан объект класса Graph с vertex_count = 4\n• Граф представлен матрицей смежности: \n• [0, 2, 0, 0]\n• [0, 0, 3, 0]\n• [0, 0, 0, 0]\n• [0, 1, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать несвязный граф\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что недостижимые вершины имеют расстояние inf\nОжидаемый результат:\n[0, 2, 5, inf]\n\nНазвание: Проверка корректной обработки петель в графе\nID: TC_DIJKSTRA_004\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Граф представлен матрицей смежности: \n• [5, 1, 3]\n• [0, 2, 4]\n• [0, 0, 1]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с петлями\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что петли игнорируются (согласно условию <= 0)\nОжидаемый результат:\n[0, 1, 3]\n\nНазвание: Проверка обработки рёбер с нулевым весом\nID: TC_DIJKSTRA_005\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Граф представлен матрицей смежности: \n• [0, 0, 5]\n• [0, 0, 3]\n• [0, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с нулевыми весами рёбер\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что рёбра с весом 0 игнорируются\nОжидаемый результат:\n[0, inf, 5]\n\nНазвание: Проверка работы алгоритма при старте не с первой вершины\nID: TC_DIJKSTRA_006\nПредусловия:\n• Создан объект класса Graph с vertex_count = 4\n• Граф представлен матрицей смежности: \n• [0, 2, 0, 0]\n• [0, 0, 1, 3]\n• [4, 0, 0, 1]\n• [0, 0, 2, 0]\n• Стартовая вершина: src = 1\nШаги:\n1. Инициализировать граф\n2. Вызвать метод dijkstra(1)\n3. Получить массив расстояний\n4. Проверить корректность расчёта от вершины 1\nОжидаемый результат:\n[5, 0, 1, 2]\n\nНазвание: Проверка работы на полносвязном графе\nID: TC_DIJKSTRA_007\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Граф представлен матрицей смежности: \n• [0, 4, 2]\n• [4, 0, 1]\n• [2, 1, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать полносвязный граф\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить выбор оптимальных путей\nОжидаемый результат:\n[0, 3, 2]\n\nНазвание: Проверка работы с большими весами рёбер\nID: TC_DIJKSTRA_008\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Граф представлен матрицей смежности: \n• [0, 1000, 500]\n• [0, 0, 100]\n• [0, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с большими весами\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить корректность вычислений с большими числами\nОжидаемый результат:\n[0, 600, 500]\n\nНазвание: Проверка обработки отрицательного индекса источника\nID: TC_DIJKSTRA_009\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Стартовая вершина: src = -1\nШаги:\n1. Инициализировать граф\n2. Вызвать метод dijkstra(-1)\n3. Зафиксировать возникшее исключение\nОжидаемый результат: Должно возникнуть исключение IndexError или подобное\n\nНазвание: Проверка обработки индекса источника, превышающего размер графа\nID: TC_DIJKSTRA_010\nПредусловия:\n• Создан объект класса Graph с vertex_count = 3\n• Стартовая вершина: src = 5\nШаги:\n1. Инициализировать граф с 3 вершинами\n2. Вызвать метод dijkstra(5)\n3. Зафиксировать возникшее исключение\nОжидаемый результат: Должно возникнуть исключение IndexError или подобное\n\nНазвание: Проверка корректности выбора при наличии равных по длине путей\nID: TC_DIJKSTRA_011\nПредусловия:\n• Создан объект класса Graph с vertex_count = 4\n• Граф представлен матрицей смежности: \n• [0, 1, 2, 0]\n• [0, 0, 0, 1]\n• [0, 0, 0, 1]\n• [0, 0, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф с альтернативными путями\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что выбирается кратчайший путь\nОжидаемый результат:\n[0, 1, 2, 2]\n\nНазвание: Проверка работы на графе без рёбер\nID: TC_DIJKSTRA_012\nПредусловия:\n• Создан объект класса Graph с vertex_count = 4\n• Граф представлен матрицей смежности из нулей: \n• [0, 0, 0, 0]\n• [0, 0, 0, 0]\n• [0, 0, 0, 0]\n• [0, 0, 0, 0]\n• Стартовая вершина: src = 0\nШаги:\n1. Инициализировать граф без рёбер\n2. Вызвать метод dijkstra(0)\n3. Получить массив расстояний\n4. Проверить, что все вершины кроме стартовой недостижимы\nОжидаемый результат:\n[0, inf, inf, inf]"
    },
    {
        "llm_name": "Mistral 3B",
        "function_type": "dijkstra",
        "response_text": "Название: Проверка корректности работы алгоритма на простом графе\nID: TC_Dijkstra_001\nПредусловия: Граф с 4 вершинами и положительными весами рёбер.\nШаги:\n1. Создать граф с матрицей смежности:\n   [\n       [0, 10, 0, 0],\n       [0, 0, 5, 0],\n       [0, 0, 0, 20],\n       [0, 0, 0, 0]\n   ]\n2. Вызвать функцию dijkstra с исходной вершиной 0.\nОжидаемый результат: [0, 10, 15, 35]\n\nНазвание: Проверка работы алгоритма на графе с одной вершиной\nID: TC_Dijkstra_002\nПредусловия: Граф с одной вершиной.\nШаги:\n1. Создать граф с матрицей смежности:\n   [\n       [0]\n   ]\n2. Вызвать функцию dijkstra с исходной вершиной 0.\nОжидаемый результат: [0]\n\nНазвание: Проверка работы алгоритма на графе с отрицательными весами\nID: TC_Dijkstra_003\nПредусловия: Граф с отрицательными весами рёбер.\nШаги:\n1. Создать граф с матрицей смежности:\n   [\n       [0, -1, 0],\n       [0, 0, -1],\n       [0, 0, 0]\n   ]\n2. Вызвать функцию dijkstra с исходной вершиной 0.\nОжидаемый результат: Алгоритм Дейкстры не работает с отрицательными весами, ожидается некорректный результат.\n\nНазвание: Проверка работы алгоритма на несвязном графе\nID: TC_Dijkstra_004\nПредусловия: Граф с двумя несвязными компонентами.\nШаги:\n1. Создать граф с матрицей смежности:\n   [\n       [0, 0, 0],\n       [0, 0, 1],\n       [0, 1, 0]\n   ]\n2. Вызвать функцию dijkstra с исходной вершиной 0.\nОжидаемый результат: [0, inf, inf]\n\nНазвание: Проверка работы алгоритма на графе с петлями\nID: TC_Dijkstra_005\nПредусловия: Граф с петлями (рёбрами, соединяющими вершину саму с собой).\nШаги:\n1. Создать граф с матрицей смежности:\n   [\n       [5, 10, 0],\n       [0, 0, 15],\n       [0, 0, 0]\n   ]\n2. Вызвать функцию dijkstra с исходной вершиной 0.\nОжидаемый результат: [0, 10, 25]"
    },
    {
        "llm_name": "YandexGPT 5Pro",
        "function_type": "dijkstra",
        "response_text": "Название: Проверка работы алгоритма Дейкстры на графе с одним источником и несколькими вершинами\nID: TC-Dijkstra-01\nПредусловия: граф с 4 вершинами и рёбрами между ними, источник — вершина 0. Матрица смежности графа:\n[\n    [0, 1, 4, float('inf')],\n    [1, 0, 2, 7],\n    [4, 2, 0, 3],\n    [float('inf'), 7, 3, 0]\n]\nШаги:\n1. Вызвать функцию dijkstra с источником src = 0.\n2. Получить массив dist с расстояниями от вершины 0 до всех остальных вершин.\nОжидаемый результат: массив dist должен быть равен [0, 1, 3, 6], что означает, что расстояние от вершины 0 до вершины 1 равно 1, до вершины 2 — 3, до вершины 3 — 6.\n\nНазвание: Проверка работы алгоритма Дейкстры на графе без рёбер\nID: TC-Dijkstra-02\nПредусловия: граф с 3 вершинами, но без рёбер между ними, источник — вершина 0. Матрица смежности графа:\n[\n    [0, float('inf'), float('inf')],\n    [float('inf'), 0, float('inf')],\n    [float('inf'), float('inf'), 0]\n]\nШаги:\n1. Вызвать функцию dijkstra с источником src = 0.\n2. Получить массив dist с расстояниями от вершины 0 до всех остальных вершин.\nОжидаемый результат: массив dist должен быть равен [0, float('inf'), float('inf')] — расстояние от вершины 0 до других вершин не определено, так как нет путей.\n\nНазвание: Проверка работы алгоритма Дейкстры на графе с отрицательными весами рёбер (ошибка)\nID: TC-Dijkstra-03\nПредусловия: граф с 3 вершинами и рёбрами с отрицательными весами, источник — вершина 0. Матрица смежности графа:\n[\n    [0, -1, float('inf')],\n    [-1, 0, 2],\n    [float('inf'), 2, 0]\n]\nШаги:\n1. Вызвать функцию dijkstra с источником src = 0.\nОжидаемый результат: алгоритм должен выдать ошибку или предупреждение о том, что он не работает с графами, содержащими рёбра с отрицательными весами.\n\nНазвание: Проверка работы алгоритма Дейкстры на пустом графе\nID: TC-Dijkstra-04\nПредусловия: пустой граф без вершин и рёбер.\nШаги:\n1. Попытаться вызвать функцию dijkstra.\nОжидаемый результат: функция должна либо вернуть ошибку о том, что граф пуст, либо корректно обработать пустой граф и вернуть пустой массив или специальное значение, указывающее на отсутствие вершин."
    },
    {
        "llm_name": "LLama 3.2 8B",
        "function_type": "dijkstra",
        "response_text": "* Название: Тест-каис «Действительность алгоритма Дейкстры»\n\nID: test_dijkstra_001\n\nПредусловия:\n - Функция `self.vertex_count` возвращает целое положительное число.\n - Функция `self.graph` представляет собой граф, в котором все веса неотрицательны.\n\nШаги:\n\n1. Выполни функцию `dijkstra(self, src)` с одним источником и двумя другими вершинами, которые соединены с\nисточником.\n2. Проверить, что расстояние от источника до других двух вершин равно ожидаемому значению.\n\nОжидаемый результат:\n - Расстояние от источника до каждой из двух вершин равно ожидаемому значению.\n\n* Название: Тест-каис «Нулевое расстояние»\n\nID: test_dijkstra_002\n\nПредусловия:\n - Функция `self.vertex_count` возвращает целое положительное число.\n - Функция `self.graph` представляет собой граф, в котором все веса неотрицательны.\n\nШаги:\n\n1. Выполни функцию `dijkstra(self, src)` с источником и одной вершиной, которая соединена с источником.\n2. Проверить, что расстояние от источника до этой вершины равно 0.\n\nОжидаемый результат:\n - Расстояние от источника до вершины равно 0.\n\n* Название: Тест-каис «Неправильный вес»\n\nID: test_dijkstra_003\n\nПредусловия:\n - Функция `self.vertex_count` возвращает целое положительное число.\n - Функция `self.graph` представляет собой граф, в котором все веса отрицательны.\n\nШаги:\n\n1. Выполни функцию `dijkstra(self, src)` с источником и одной вершиной, которые соединены с источником.\n2. Проверить, что расстрание от источника до этой вершины равно ожидаемому значению.\n\nОжидаемый результат:\n - Расстояние от источника до вершины равно ожидаемому значению.\n\n* Название: Тест-каис «Циклонный граф»\n\nID: test_dijkstra_004\n\nПредусловия:\n - Функция `self.vertex_count` возвращает целое положительное число.\n - Функция `self.graph` представляет собой граф, который является циклом.\n\nШаги:\n\n1. Выполни функцию `dijkstra(self, src)` с источником и одной вершиной, которые соединены с источником.\n2. Проверить, что расстояние от источника до этой вершины равно ожидаемому значению.\n\nОжидаемый результат:\n - Расстояние от источника до вершины равно ожидаемому значению.\n\n* Название: Тест-каис «Функция не работает для нулевого входного значения»\n\nID: test_dijkstra_005\n\nПредусловия:\n - Функция `self.vertex_count` возвращает целое положительное число.\n - Функция `self.graph` представляет собой граф, который является циклом.\n\nШаги:\n\n1. Выполни функцию `dijkstra(self, src)` с нулевым входным значением.\n2. Проверить, что функция бросает исключение или возвращает ошибочный результат.\n\nОжидаемый результат:\n - Функция бросит исключение или вернет ошибочный результат."
    },
    {
        "llm_name": "DeepSeek V3",
        "function_type": "ui",
        "response_text": "Название: Проверка отображения списка и FloatingActionButton\nID: TC_MAIN_ACTIVITY_001\nПредусловия:\n• Активность MainActivity запущена.\n• XML-разметка (activity_main.xml) содержит ListView и FloatingActionButton.\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\nОжидаемый результат:\n• На экране отображается ListView с пустым списком (или предустановленными данными, если адаптер не пуст).\n• В правом нижнем углу отображается FloatingActionButton.\n\nНазвание: Проверка корректного отображения данных в списке\nID: TC_MAIN_ACTIVITY_002\nПредусловия:\n• Адаптер StringAdapter инициализирован.\n• В адаптере есть данные (например, [\"Item 1\", \"Item 2\", \"Item 3\"]).\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\n3. Проверить отображение списка.\nОжидаемый результат:\n• В ListView отображаются все переданные в адаптер элементы.\n• Каждый элемент списка соответствует переданным данным.\n\nНазвание: Проверка регистрации контекстного меню для ListView\nID: TC_MAIN_ACTIVITY_003\nПредусловия:\n• Активность запущена.\n• В ListView есть хотя бы один элемент.\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\n3. Нажать и удерживать любой элемент списка.\nОжидаемый результат:\n• Открывается контекстное меню (если оно реализовано).\n\nНазвание: Проверка перехода в активность добавления элемента\nID: TC_MAIN_ACTIVITY_004\nПредусловия:\n• Активность запущена.\n• Метод startAddItemActivity() корректно реализован.\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\n3. Нажать на FloatingActionButton.\nОжидаемый результат:\n• Происходит переход в активность добавления нового элемента (AddItemActivity или аналогичную).\n\nНазвание: Проверка отображения пустого списка\nID: TC_MAIN_ACTIVITY_005\nПредусловия:\n• Адаптер StringAdapter пуст.\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\nОжидаемый результат:\n• ListView отображает пустой список (или заглушку, если она предусмотрена).\n\nНазвание: Проверка сохранения состояния активности\nID: TC_MAIN_ACTIVITY_006\nПредусловия:\n• Активность запущена.\n• В списке есть элементы (например, [\"Item 1\", \"Item 2\"]).\nШаги:\n1. Запустить приложение.\n2. Открыть MainActivity.\n3. Повернуть устройство (изменить ориентацию экрана).\nОжидаемый результат:\n• После поворота экрана список сохраняет свое состояние (элементы не пропадают)."
    },
    {
        "llm_name": "ChatGPT-4o",
        "function_type": "ui",
        "response_text": "Название: Проверка успешной инициализации списка и кнопки при запуске активности\nID: TC_UI_001\nПредусловия:\n• Приложение установлено и запускается на устройстве или эмуляторе Android\n• Все ID (R.id.list_item_textview, R.id.activity_main_listview, R.id.activity_main_floatingactionbutton) присутствуют в activity_main.xml\n• Класс StringAdapter реализован и корректен\nШаги:\n1. Запустить MainActivity.\n2. Проверить, что список (ListView) отображается.\n3. Проверить, что адаптер (StringAdapter) привязан к ListView.\n4. Проверить наличие и кликабельность FloatingActionButton.\nОжидаемый результат:\nВсе компоненты UI отображаются корректно, список пустой или инициализирован, FAB активна.\n\nНазвание: Проверка перехода к добавлению элемента при нажатии FAB\nID: TC_UI_002\nПредусловия:\n• MainActivity запущена\n• Метод startAddItemActivity() корректно реализован и вызывает другую активность (например, AddItemActivity)\nШаги:\n1. Запустить MainActivity.\n2. Нажать на FloatingActionButton.\nОжидаемый результат:\nПроисходит переход к экрану добавления нового элемента (запускается AddItemActivity).\n\nНазвание: Проверка обработки ошибки при отсутствии ListView в макете\nID: TC_UI_003\nПредусловия:\n• В activity_main.xml отсутствует элемент с ID activity_main_listview\nШаги:\n1. Запустить MainActivity.\n2. Наблюдать поведение приложения.\nОжидаемый результат:\nПриложение выбрасывает NullPointerException или аналогичную ошибку при вызове findViewById.\n\nНазвание: Проверка, что ListView регистрируется для контекстного меню\nID: TC_UI_004\nПредусловия:\n• MainActivity запущена\n• Пользователь может вызвать контекстное меню долгим нажатием\nШаги:\n1. Запустить MainActivity.\n2. Долгим нажатием по элементу списка вызвать контекстное меню.\nОжидаемый результат:\nКонтекстное меню появляется, и доступные действия отображаются.\n\nНазвание: Проверка привязки адаптера к ListView\nID: TC_UI_005\nПредусловия:\n• Приложение запущено\n• Доступен StringAdapter\nШаги:\n1. Запустить MainActivity.\n2. Получить текущий адаптер ListView через getAdapter().\nОжидаемый результат:\nListView.getAdapter() возвращает экземпляр StringAdapter.\n\nНазвание: Проверка поведения при отсутствии FloatingActionButton в макете\nID: TC_UI_006\nПредусловия:\n• В activity_main.xml отсутствует элемент с ID activity_main_floatingactionbutton\nШаги:\n1. Запустить MainActivity.\n2. Наблюдать поведение.\nОжидаемый результат:\nПриложение выбрасывает исключение при вызове findViewById или setOnClickListener."
    },
    {
        "llm_name": "Claude Sonnet 4",
        "function_type": "ui",
        "response_text": "Название: Проверка корректной инициализации всех UI-элементов при первом создании активности\nID: TC_ONCREATE_001\nПредусловия:\n• Приложение установлено на устройстве/эмуляторе\n• Активность запускается впервые\n• Файл макета R.layout.activity_main существует и содержит все необходимые элементы\n• StringAdapter корректно инициализирован\n• savedInstanceState = null\nШаги:\n1. Запустить активность\n2. Проверить, что вызван super.onCreate(savedInstanceState)\n3. Проверить, что установлен макет activity_main\n4. Проверить создание объекта StringAdapter с правильными параметрами\n5. Проверить, что ListView найден по ID activity_main_listview\n6. Проверить, что адаптер установлен для ListView\n7. Проверить регистрацию контекстного меню для ListView\n8. Проверить, что FloatingActionButton найден по ID activity_main_floatingactionbutton\n9. Проверить установку OnClickListener для FloatingActionButton\nОжидаемый результат:\n• Активность успешно создана\n• Макет установлен корректно\n• ListView отображается с установленным адаптером\n• FloatingActionButton видим и реагирует на нажатия\n• Контекстное меню зарегистрировано для ListView\n• Все UI-элементы инициализированы без исключений\n\nНазвание: Проверка корректной инициализации при воссоздании активности с savedInstanceState\nID: TC_ONCREATE_002\nПредусловия:\n• Активность была ранее создана и уничтожена (например, при повороте экрана)\n• savedInstanceState содержит сохранённые данные\n• Все ресурсы доступны\nШаги:\n1. Имитировать поворот экрана или другое событие пересоздания активности\n2. Вызвать onCreate с непустым savedInstanceState\n3. Проверить, что super.onCreate вызван с переданным savedInstanceState\n4. Проверить корректную инициализацию всех UI-элементов\n5. Проверить восстановление состояния элементов (если применимо)\nОжидаемый результат:\n• Активность пересоздана успешно\n• Состояние элементов восстановлено корректно\n• Все функции работают как при первом создании\n• Данные в ListView сохранены (если были)\n\nНазвание: Проверка обработки ошибки при отсутствии ListView в макете\nID: TC_ONCREATE_003\nПредусловия:\n• Макет activity_main существует\n• В макете отсутствует элемент с ID activity_main_listview\n• StringAdapter создан корректно\nШаги:\n1. Запустить активность\n2. Дождаться выполнения findViewById(R.id.activity_main_listview)\n3. Зафиксировать поведение при попытке установки адаптера для null объекта\nОжидаемый результат:\n• Приложение должно корректно обработать ошибку\n• Должно возникнуть исключение NullPointerException при вызове listView.setAdapter()\n• Активность не должна завершиться аварийно (при наличии обработки ошибок)\n\nНазвание: Проверка обработки отсутствия FloatingActionButton\nID: TC_ONCREATE_004\nПредусловия:\n• Макет activity_main существует\n• В макете отсутствует элемент с ID activity_main_floatingactionbutton\n• Остальные элементы присутствуют\nШаги:\n1. Запустить активность\n2. Дождаться выполнения findViewById(R.id.activity_main_floatingactionbutton)\n3. Зафиксировать поведение при попытке установки OnClickListener для null объекта\nОжидаемый результат:\n• Должно возникнуть исключение NullPointerException при вызове setOnClickListener()\n• Остальная функциональность должна работать корректно\n• ListView должен отображаться и функционировать\n\nНазвание: Проверка корректной обработки нажатия на плавающую кнопку\nID: TC_ONCREATE_005\nПредусловия:\n• Активность успешно создана\n• FloatingActionButton отображается на экране\n• Метод startAddItemActivity() существует и доступен\nШаги:\n1. Запустить активность\n2. Дождаться полной загрузки UI\n3. Нажать на FloatingActionButton\n4. Проверить вызов метода startAddItemActivity()\nОжидаемый результат:\n• OnClickListener срабатывает при нажатии\n• Метод startAddItemActivity() вызывается\n• Открывается соответствующая активность добавления элемента\n• Анимация нажатия отображается корректно\n\nНазвание: Проверка обработки быстрых множественных нажатий на кнопку\nID: TC_ONCREATE_006\nПредусловия:\n• Активность успешно создана\n• FloatingActionButton готов к взаимодействию\nШаги:\n1. Запустить активность\n2. Быстро нажать на FloatingActionButton несколько раз подряд\n3. Проверить количество вызовов startAddItemActivity()\n4. Проверить стабильность приложения\nОжидаемый результат:\n• Каждое нажатие должно вызывать startAddItemActivity()\n• Приложение должно оставаться стабильным\n• Не должно возникать конфликтов при открытии нескольких активностей\n• UI должен оставаться отзывчивым\n\nНазвание: Проверка функционирования контекстного меню для списка\nID: TC_ONCREATE_007\nПредусловия:\n• Активность создана успешно\n• ListView содержит хотя бы один элемент\n• Контекстное меню зарегистрировано\nШаги:\n1. Запустить активность\n2. Добавить элемент в ListView (если необходимо)\n3. Выполнить длительное нажатие на элемент списка\n4. Проверить появление контекстного меню\nОжидаемый результат:\n• Контекстное меню отображается при длительном нажатии\n• Меню содержит соответствующие опции\n• Опции меню функционируют корректно\n\nНазвание: Проверка обработки ошибки при создании StringAdapter\nID: TC_ONCREATE_008\nПредусловия:\n• Неверно указан ресурс R.id.list_item_textview или он отсутствует\n• Активность пытается создать StringAdapter\nШаги:\n1. Попытаться запустить активность с неверным ID для StringAdapter\n2. Зафиксировать возникшее исключение\n3. Проверить поведение приложения\nОжидаемый результат:\n• Должно возникнуть исключение при создании StringAdapter\n• Приложение должно корректно обработать ошибку\n• Пользователь должен получить понятное сообщение об ошибке\n\nНазвание: Проверка создания активности при ограниченных ресурсах памяти\nID: TC_ONCREATE_009\nПредусловия:\n• Устройство имеет ограниченную доступную память\n• Запущены другие приложения, потребляющие память\nШаги:\n1. Создать условия низкой памяти на устройстве\n2. Запустить активность\n3. Проверить успешность создания всех элементов\n4. Проверить производительность и отзывчивость\nОжидаемый результат:\n• Активность создается, но может работать медленнее\n• Все элементы инициализируются корректно\n• Система может оптимизировать использование ресурсов\n• Приложение остается стабильным\n\nНазвание: Проверка обработки поворота экрана во время onCreate\nID: TC_ONCREATE_010\nПредусловия:\n• Активность поддерживает оба orientation режима\n• Поворот происходит во время выполнения onCreate\nШаги:\n1. Начать запуск активности\n2. Во время выполнения onCreate повернуть устройство\n3. Проверить корректность завершения инициализации\n4. Проверить состояние UI после поворота\nОжидаемый результат:\n• Активность корректно пересоздается\n• Все элементы инициализируются в новой ориентации\n• Данные не теряются\n• UI адаптируется к новой ориентации\n\nНазвание: Проверка обработки отсутствующего файла макета\nID: TC_ONCREATE_011\nПредусловия:\n• Файл макета R.layout.activity_main отсутствует или недоступен\n• Активность пытается установить этот макет\nШаги:\n1. Попытаться запустить активность с отсутствующим макетом\n2. Зафиксировать возникшее исключение при setContentView\n3. Проверить поведение системы\nОжидаемый результат:\n• Должно возникнуть исключение InflateException или подобное\n• Активность не должна создаться\n• Система должна корректно обработать ошибку\n• Пользователь должен получить сообщение об ошибке\n\nНазвание: Проверка корректной последовательности вызовов в onCreate\nID: TC_ONCREATE_012\nПредусловия:\n• Активность готова к запуску\n• Доступны средства мониторинга вызовов методов\nШаги:\n1. Запустить активность с мониторингом\n2. Отследить последовательность вызовов в onCreate\n3. Проверить, что super.onCreate вызывается первым\n4. Проверить порядок инициализации UI-элементов\nОжидаемый результат:\n• super.onCreate() вызывается первым\n• setContentView() выполняется до поиска элементов\n• findViewById() выполняется после setContentView()\n• setAdapter() и setOnClickListener() выполняются после findViewById()\n• Все вызовы выполняются в правильном порядке"
    },
    {
        "llm_name": "Mistral 3B",
        "function_type": "ui",
        "response_text": "Название: Проверка инициализации UI-элементов\nID: TC-UI-001\nПредусловия: Нет\nШаги:\n1. Запустить активность.\n2. Проверить, что `setContentView(R.layout.activity_main)` был вызван.\n3. Проверить, что `ListView` и `FloatingActionButton` инициализированы и не равны `null`.\n\nОжидаемый результат: Все UI-элементы инициализированы корректно.\n\nНазвание: Проверка установки адаптера для ListView\nID: TC-UI-002\nПредусловия: Активность запущена\nШаги:\n1. Проверить, что `mAdapter` инициализирован с правильными параметрами.\n2. Проверить, что `listView.setAdapter(mAdapter)` был вызван.\n\nОжидаемый результат: Адаптер установлен для `ListView`.\n\nНазвание: Проверка регистрации контекстного меню для ListView\nID: TC-UI-003\nПредусловия: Активность запущена\nШаги:\n1. Проверить, что `registerForContextMenu(listView)` был вызван.\n\nОжидаемый результат: Контекстное меню зарегистрировано для `ListView`.\n\nНазвание: Проверка обработки нажатия на FloatingActionButton\nID: TC-UI-004\nПредусловия: Активность запущена\nШаги:\n1. Нажать на `FloatingActionButton`.\n2. Проверить, что был вызван метод `startAddItemActivity()`.\n\nОжидаемый результат: Метод `startAddItemActivity()` был вызван.\n\nНазвание: Проверка корректности отображения элементов ListView\nID: TC-UI-005\nПредусловия: Адаптер содержит данные\nШаги:\n1. Добавить элементы в адаптер.\n2. Проверить, что `ListView` отображает добавленные элементы.\n\nОжидаемый результат: Элементы отображаются в `ListView`.\n\nНазвание: Проверка поведения при отсутствии данных в адаптере\nID: TC-UI-006\nПредусловия: Адаптер не содержит данных\nШаги:\n1. Проверить, что `ListView` не содержит элементов.\n\nОжидаемый результат: `ListView` пуст."
    },
    {
        "llm_name": "YandexGPT 5Pro",
        "function_type": "ui",
        "response_text": "Название: Проверка инициализации UI-элементов при запуске активности\nID: TC-UI-Init-01\nПредусловия: приложение запущено, активность MainActivity ещё не была открыта\nШаги:\n1. Открыть активность MainActivity.\n2. Проверить наличие ListView с идентификатором activity_main_listview.\n3. Проверить наличие FloatingActionButton с идентификатором activity_main_floatingactionbutton.\nОжидаемый результат: ListView и FloatingActionButton успешно инициализированы и отображаются на экране.\n\nНазвание: Проверка установки адаптера для ListView\nID: TC-Adapter-Setup-02\nПредусловия: активность MainActivity открыта\nШаги:\n1. Убедиться, что mAdapter создан и связан с ListView.\n2. Проверить, что ListView отображает данные из адаптера.\nОжидаемый результат: адаптер StringAdapter успешно установлен для ListView, данные из адаптера отображаются корректно.\n\nНазвание: Проверка работы FloatingActionButton\nID: TC-FAB-Functionality-03\nПредусловия: активность MainActivity открыта\nШаги:\n1. Нажать на FloatingActionButton.\n2. Проверить запуск активности для добавления нового элемента.\nОжидаемый результат: при нажатии на FloatingActionButton запускается активность для добавления нового элемента (startAddItemActivity).\n\nНазвание: Проверка отображения контекстного меню для ListView\nID: TC-ContextMenu-Display-04\nПредусловия: активность MainActivity открыта, ListView содержит элементы\nШаги:\n1. Вызвать контекстное меню для ListView (например, длительным нажатием на элемент списка).\n2. Проверить отображение контекстного меню.\nОжидаемый результат: контекстное меню успешно отображается при вызове для ListView.\n\nНазвание: Проверка поведения при отсутствии элементов в списке\nID: TC-EmptyList-Behavior-05\nПредусловия: активность MainActivity открыта, список в ListView пуст\nШаги:\n1. Проверить отображение ListView при пустом списке.\n2. Нажать на FloatingActionButton и добавить новый элемент.\n3. Проверить обновление ListView после добавления элемента.\nОжидаемый результат: при пустом списке ListView отображается корректно, после добавления элемента список обновляется и отображает новый элемент."
    },
    {
        "llm_name": "LLama 3.2 8B",
        "function_type": "ui",
        "response_text": "* Название: Тест-каис «Инициализация UI-элементов»\n\nID: test_onCreate_001\n\nПредусловия:\n - Активность существует и имеет уникальный ID.\n - layouts/activity_main.xml существует в проекте.\n\nШаги:\n\n1. Добавьте следующий código перед вызовом `setContentView`:\n```java\nLog.d(\"Тест-каис\", \"Считываем layout activity_main.xml\");\n```\n2. Выполни метод `onCreate` с ожидаемым результатом.\n3. Проверьте, что в логе есть запись с текстом «Считываем layout activity_main.xml».\n4. Добавьте following код после вызова `setContentView`:\n```java\nLog.d(\"Тест-каис\", \"Обновляем mAdapter\");\n```\n5. Выполни метод `onCreate` с ожидаемым результатом.\n6. Проверьте, что в логе есть запись с текстом «Обновляем mAdapter».\n\nОжидаемый результат:\n - В логе есть запись с текстом «Считываем layout activity_main.xml».\n - В логе есть запись с текстом «Обновляем mAdapter».\n\n* Название: Тест-каис «Регистрация для нажатия на плавающую кнопку»\n\nID: test_onCreate_002\n\nПредусловия:\n - Активность существует и имеет уникальный ID.\n - layouts/activity_main.xml существует в проекте.\n\nШаги:\n\n1. Добавьте следующий código после вызова `setContentView`:\n```java\nLog.d(\"Тест-каис\", \"Обновляем fabOnClickListener\");\n```\n2. Выполни метод `onCreate` с ожидаемым результатом.\n3. Проверьте, что в логе есть запись с текстом «Обновляем fabOnClickListener».\n4. Добавьте following код после注册а для нажатия на плавающую кнопку:\n```java\nLog.d(\"Тест-каис\", \"Начинаем_add_item_Activity\");\n```\n5. Выполни метод `onCreate` с ожидаемым результатом.\n6. Проверьте, что в логе есть запись с текстом «Начинаем_add_item_Activity».\n\nОжидаемый результат:\n - В логе есть запись с текстом «Обновляем fabOnClickListener».\n - В логе есть запись с текстом «Начинаем_add_item_Activity».\n\n* Название: Тест-каис «Обработка нажатия на плавающую кнопку»\n\nID: test_onCreate_003\n\nПредусловия:\n - Активность существует и имеет уникальный ID.\n - layouts/activity_main.xml существует в проекте.\n - fabOnClickListener уже зарегистрирован.\n\nШаги:\n\n1. Выполни метод `onCreate` с ожидаемым результатом.\n2. Добавьте следующий код после вызова `setContentView`:\n```java\nLog.d(\"Тест-каис\", \"Нажата плавающая кнопка\");\n```\n3. Нажми плавающую кнопку в simulации.\n4. Проверьте, что в логе есть запись с текстом «Нажата плавающая кнопка».\n5. Выполни метод `onCreate` с ожидаемым результатом.\n\nОжидаемый результат:\n - В логе есть запись с текстом «Нажата плавающая кнопка».\n\n* Название: Тест-каис «Пersistência для нажатия на плавающую кнопку»\n\nID: test_onCreate_004\n\nПредусловия:\n - Активность существует и имеет уникальный ID.\n - layouts/activity_main.xml существовало в проекте.\n - fabOnClickListener уже зарегистрирован.\n\nШаги:\n\n1. Выполни метод `onCreate` с ожидаемым результатом.\n2. Добавьте следующий код после вызова `setContentView`:\n```java\nLog.d(\"Тест-каис\", \"Нажата плавающая кнопка повторно\");\n```\n3. Нажми плавающую кнопку в simulации.\n4. Повторно нажми плавающую кнопку в simulации.\n5. Проверьте, что в логе есть запись с текстом «Нажата плавающая кнопка повторно».\n\nОжидаемый результат:\n - В логе есть запись с текстом «Нажата плавающая кнопка повторно»."
    },
    {
        "llm_name": "DeepSeek V3",
        "function_type": "atbash",
        "response_text": "**Название:** Проверка декодирования строчной буквы\n**ID:** TC_ATBASH_001\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"a\"\n**Ожидаемый результат:** \"z\"\n\n**Название:** Проверка декодирования заглавной буквы\n**ID:** TC_ATBASH_002\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"Z\"\n**Ожидаемый результат:** \"A\"\n\n**Название:** Проверка декодирования строки\n**ID:** TC_ATBASH_003\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"abc\"\n**Ожидаемый результат:** \"zyx\"\n\n**Название:** Проверка обработки разных регистров\n**ID:** TC_ATBASH_004\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"AbC\"\n**Ожидаемый результат:** \"ZyX\"\n\n**Название:** Проверка обработки неалфавитных символов\n**ID:** TC_ATBASH_005\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"a1b!\"\n**Ожидаемый результат:** \"z1y!\"\n\n**Название:** Проверка обработки пустой строки\n**ID:** TC_ATBASH_006\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"\"\n**Ожидаемый результат:** \"\"\n\n**Название:** Проверка обработки пробелов\n**ID:** TC_ATBASH_007\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"a b c\"\n**Ожидаемый результат:** \"z y x\"\n\n**Название:** Проверка обработки нелатинских символов\n**ID:** TC_ATBASH_008\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"абв\"\n**Ожидаемый результат:** \"абв\"\n\n**Название:** Проверка обработки граничных значений\n**ID:** TC_ATBASH_009\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом chr(255)\n**Ожидаемый результат:** chr(255)\n\n**Название:** Проверка обратимости шифрования\n**ID:** TC_ATBASH_010\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с результатом вызова decode(\"test\")\n**Ожидаемый результат:** \"test\"\n\n**Название:** Проверка обработки длинных строк\n**ID:** TC_ATBASH_011\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Создать строку из 10000 символов \"a\"\n2. Вызвать функцию decode() с этой строкой\n**Ожидаемый результат:** Строка из 10000 символов \"z\"\n\n**Название:** Проверка обработки Unicode\n**ID:** TC_ATBASH_012\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"a©\"\n**Ожидаемый результат:** \"z©\"\n\n**Название:** Проверка обработки управляющих символов\n**ID:** TC_ATBASH_013\n**Предусловия:** Функция decode() реализует шифр Атбаш\n**Шаги:**\n1. Вызвать функцию decode() с аргументом \"a\nb\"\n**Ожидаемый результат:** \"z\ny\""
    },
    {
        "llm_name": "ChatGPT-4o",
        "function_type": "atbash",
        "response_text": "Название: Расшифровка строки из заглавных букв (A-Z)\nID: TC_ATBASH_001\nПредусловия:\n• Метод decode доступен для вызова\n• Вход: строка \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nШаги:\n1. Вызвать метод decode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n2. Считать результат\nОжидаемый результат:\n\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"\n\nНазвание: Расшифровка строки из строчных букв (a-z)\nID: TC_ATBASH_002\nПредусловия:\n• Метод decode доступен\n• Вход: \"abcdefghijklmnopqrstuvwxyz\"\nШаги:\n1. Вызвать decode(\"abcdefghijklmnopqrstuvwxyz\")\n2. Считать результат\nОжидаемый результат:\n\"zyxwvutsrqponmlkjihgfedcba\"\n\nНазвание: Расшифровка строки с буквами разного регистра\nID: TC_ATBASH_003\nПредусловия:\n• Вход: \"AbCdEf\"\nШаги:\n1. Вызвать decode(\"AbCdEf\")\n2. Считать результат\nОжидаемый результат:\n\"ZyXwVu\"\n\nНазвание: Игнорирование символов, не являющихся латинскими буквами\nID: TC_ATBASH_004\nПредусловия:\n• Вход: \"Hello, World!\"\nШаги:\n1. Вызвать decode(\"Hello, World!\")\n2. Считать результат\nОжидаемый результат:\n\"Svool, Dliow!\"\n(Атбаш для \"Hello, World!\")\n\nНазвание: Проверка обработки пустой строки\nID: TC_ATBASH_005\nПредусловия:\n• Вход: \"\"\nШаги:\n1. Вызвать decode(\"\")\n2. Считать результат\nОжидаемый результат:\n\"\"\n(пустая строка)\n\nНазвание: Строка, содержащая только цифры и спецсимволы\nID: TC_ATBASH_006\nПредусловия:\n• Вход: \"1234!@#\"\nШаги:\n1. Вызвать decode(\"1234!@#\")\n2. Считать результат\nОжидаемый результат:\n\"1234!@#\"\n(ничего не изменяется, т.к. нет букв)\n\nНазвание: Проверка символов не из латинского алфавита\nID: TC_ATBASH_007\nПредусловия:\n• Вход: \"Привет, мир!\"\nШаги:\n1. Вызвать decode(\"Привет, мир!\")\n2. Считать результат\nОжидаемый результат:\n\"Привет, мир!\"\n(символы вне A-Z/a-z не изменяются)"
    },
    {
        "llm_name": "Claude Sonnet 4",
        "function_type": "atbash",
        "response_text": "Название: Проверка корректного декодирования строчных латинских букв\nID: TC_ATBASH_001\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит только строчные латинские буквы\nШаги:\n1. Подготовить входную строку \"abc\"\n2. Вызвать функцию decode(\"abc\")\n3. Получить результат декодирования\n4. Сравнить с ожидаемым результатом\nОжидаемый результат:\n\"zyx\"\n\nНазвание: Проверка корректного декодирования заглавных латинских букв\nID: TC_ATBASH_002\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит только заглавные латинские буквы\nШаги:\n1. Подготовить входную строку \"XYZ\"\n2. Вызвать функцию decode(\"XYZ\")\n3. Получить результат декодирования\n4. Сравнить с ожидаемым результатом\nОжидаемый результат:\n\"CBA\"\n\nНазвание: Проверка декодирования строки со смешанным регистром букв\nID: TC_ATBASH_003\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит буквы в разных регистрах\nШаги:\n1. Подготовить входную строку \"AbCdEf\"\n2. Вызвать функцию decode(\"AbCdEf\")\n3. Получить результат декодирования\n4. Проверить сохранение регистра каждой буквы\nОжидаемый результат:\n\"ZyXwVu\"\n\nНазвание: Проверка сохранения цифр без изменений\nID: TC_ATBASH_004\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит только цифры\nШаги:\n1. Подготовить входную строку \"12345\"\n2. Вызвать функцию decode(\"12345\")\n3. Получить результат декодирования\n4. Проверить, что цифры остались без изменений\nОжидаемый результат:\n\"12345\"\n\nНазвание: Проверка сохранения специальных символов без изменений\nID: TC_ATBASH_005\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит специальные символы\nШаги:\n1. Подготовить входную строку \"!@#$%^&*()\"\n2. Вызвать функцию decode(\"!@#$%^&*()\")\n3. Получить результат декодирования\n4. Проверить, что специальные символы остались без изменений\nОжидаемый результат:\n\"!@#$%^&*()\"\n\nНазвание: Проверка сохранения пробелов в тексте\nID: TC_ATBASH_006\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит пробелы\nШаги:\n1. Подготовить входную строку \"a b c\"\n2. Вызвать функцию decode(\"a b c\")\n3. Получить результат декодирования\n4. Проверить сохранение позиций пробелов\nОжидаемый результат:\n\"z y x\"\n\nНазвание: Проверка обработки пустой входной строки\nID: TC_ATBASH_007\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка пустая\nШаги:\n1. Подготовить пустую строку \"\"\n2. Вызвать функцию decode(\"\")\n3. Получить результат декодирования\n4. Проверить, что результат также пустая строка\nОжидаемый результат:\n\"\"\n\nНазвание: Проверка декодирования полного алфавита в нижнем регистре\nID: TC_ATBASH_008\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит все буквы алфавита в нижнем регистре\nШаги:\n1. Подготовить входную строку \"abcdefghijklmnopqrstuvwxyz\"\n2. Вызвать функцию decode(\"abcdefghijklmnopqrstuvwxyz\")\n3. Получить результат декодирования\n4. Проверить корректность преобразования каждой буквы\nОжидаемый результат:\n\"zyxwvutsrqponmlkjihgfedcba\"\n\nНазвание: Проверка декодирования полного алфавита в верхнем регистре\nID: TC_ATBASH_009\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит все буквы алфавита в верхнем регистре\nШаги:\n1. Подготовить входную строку \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n2. Вызвать функцию decode(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n3. Получить результат декодирования\n4. Проверить корректность преобразования каждой буквы\nОжидаемый результат:\n\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"\n\nНазвание: Проверка декодирования первых и последних букв алфавита\nID: TC_ATBASH_010\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит граничные буквы алфавита\nШаги:\n1. Подготовить входную строку \"AaZz\"\n2. Вызвать функцию decode(\"AaZz\")\n3. Получить результат декодирования\n4. Проверить правильность преобразования граничных значений\nОжидаемый результат:\n\"ZzAa\"\n\nНазвание: Проверка декодирования текста со смешанным содержимым\nID: TC_ATBASH_011\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит буквы, цифры, символы и пробелы\nШаги:\n1. Подготовить входную строку \"Hello World! 123\"\n2. Вызвать функцию decode(\"Hello World! 123\")\n3. Получить результат декодирования\n4. Проверить правильное преобразование только букв\nОжидаемый результат:\n\"Svool Dliow! 123\"\n\nНазвание: Проверка производительности на длинной строке\nID: TC_ATBASH_012\nПредусловия:\n• Функция decode доступна для вызова\n• Подготовлена длинная строка (более 1000 символов)\nШаги:\n1. Подготовить строку из 1000+ символов (например, повторяющийся алфавит)\n2. Вызвать функцию decode с длинной строкой\n3. Измерить время выполнения\n4. Проверить корректность результата\nОжидаемый результат:\n• Функция выполняется без ошибок\n• Время выполнения разумное (менее 1 секунды)\n• Результат соответствует правилам шифра Атбаш\n\nНазвание: Проверка свойства обратимости шифра Атбаш\nID: TC_ATBASH_013\nПредусловия:\n• Функция decode доступна для вызова\n• Подготовлена тестовая строка\nШаги:\n1. Подготовить исходную строку \"TestString\"\n2. Вызвать decode(\"TestString\") - получить первый результат\n3. Вызвать decode(первый_результат) - получить второй результат\n4. Сравнить второй результат с исходной строкой\nОжидаемый результат:\nИсходная строка: \"TestString\"\nПосле первого decode: \"GvhgHgirmt\"\nПосле второго decode: \"TestString\"\n\nНазвание: Проверка обработки некорректного типа входных данных\nID: TC_ATBASH_014\nПредусловия:\n• Функция decode доступна для вызова\n• Подготовлены входные данные неверного типа\nШаги:\n1. Попытаться вызвать decode(123) (число вместо строки)\n2. Зафиксировать возникшее исключение\n3. Проверить тип исключения\nОжидаемый результат:\n• Должно возникнуть исключение TypeError или AttributeError\n• Функция не должна возвращать некорректный результат\n\nНазвание: Проверка обработки управляющих символов\nID: TC_ATBASH_015\nПредусловия:\n• Функция decode доступна для вызова\n• Входная строка содержит символы табуляции и переноса строки\nШаги:\n1. Подготовить строку \"a\tb\nc\"\n2. Вызвать функцию decode(\"a\tb\nc\")\n3. Получить результат декодирования\n4. Проверить сохранение управляющих символов\nОжидаемый результат:\n\"z\ty\nx\"\n\nНазвание: Проверка декодирования односимвольных строк\nID: TC_ATBASH_016\nПредусловия:\n• Функция decode доступна для вызова\n• Подготовлены односимвольные строки разных типов\nШаги:\n1. Вызвать decode(\"A\") - заглавная буква\n2. Вызвать decode(\"z\") - строчная буква\n3. Вызвать decode(\"5\") - цифра\n4. Вызвать decode(\"@\") - символ\n5. Проверить корректность каждого результата\nОжидаемый результат:\ndecode(\"A\") = \"Z\"\ndecode(\"z\") = \"a\"\ndecode(\"5\") = \"5\"\ndecode(\"@\") = \"@\""
    },
    {
        "llm_name": "Mistral 3B",
        "function_type": "atbash",
        "response_text": "Название: Тест на декодирование заглавных букв\nID: TC1\nПредусловия: Входная строка: \"ZOO\"\nШаги:\n1. Вызвать функцию decode с аргументом \"ZOO\"\nОжидаемый результат: \"ALL\"\n\nНазвание: Тест на декодирование строчных букв\nID: TC2\nПредусловия: Входная строка: \"hello\"\nШаги:\n1. Вызвать функцию decode с аргументом \"hello\"\nОжидаемый результат: \"svool\"\n\nНазвание: Тест на декодирование смешанных букв\nID: TC3\nПредусловия: Входная строка: \"HeLLo\"\nШаги:\n1. Вызвать функцию decode с аргументом \"HeLLo\"\nОжидаемый результат: \"SvOOl\"\n\nНазвание: Тест на декодирование с неалфавитными символами\nID: TC4\nПредусловия: Входная строка: \"H3ll0 W0rld!\"\nШаги:\n1. Вызвать функцию decode с аргументом \"H3ll0 W0rld!\"\nОжидаемый результат: \"S3oo0 D0liw!\"\n\nНазвание: Тест на пустую строку\nID: TC5\nПредусловия: Входная строка: \"\"\nШаги:\n1. Вызвать функцию decode с аргументом \"\"\nОжидаемый результат: \"\"\n\nНазвание: Тест на декодирование строки с пробелами\nID: TC6\nПредусловия: Входная строка: \"Atbash Cipher\"\nШаги:\n1. Вызвать функцию decode с аргументом \"Atbash Cipher\"\nОжидаемый результат: \"Zgzyh Xrksvi\"\n\nНазвание: Тест на декодирование строки с цифрами\nID: TC7\nПредусловия: Входная строка: \"12345\"\nШаги:\n1. Вызвать функцию decode с аргументом \"12345\"\nОжидаемый результат: \"12345\"\n\nНазвание: Тест на декодирование строки со специальными символами\nID: TC8\nПредусловия: Входная строка: \"@#$%\"\nШаги:\n1. Вызвать функцию decode с аргументом \"@#$%\"\nОжидаемый результат: \"@#$%\"\n\nНазвание: Тест на декодирование строки с юникод символами\nID: TC9\nПредусловия: Входная строка: \"Café\"\nШаги:\n1. Вызвать функцию decode с аргументом \"Café\"\nОжидаемый результат: \"Xzuvé\"\n\nНазвание: Тест на декодирование строки с табуляцией и новой строкой\nID: TC10\nПредусловия: Входная строка: \"test\ntest\"\nШаги:\n1. Вызвать функцию decode с аргументом \"test\ntest\"\nОжидаемый результат: \"gvhg\ngvhg\""
    },
    {
        "llm_name": "YandexGPT 5Pro",
        "function_type": "atbash",
        "response_text": "Название: Проверка декодирования простого текста с заглавными и строчными буквами\nID: TC-Atbash-Decode-01\nПредусловия: входной текст содержит как заглавные, так и строчные буквы\nШаги:\n1. Вызвать функцию decode с аргументом char = \"HelloWorld\".\n2. Получить результат декодирования.\nОжидаемый результат: функция возвращает строку \"svool dliow\".\n\nНазвание: Проверка декодирования текста, содержащего специальные символы и пробелы\nID: TC-Atbash-Decode-02\nПредусловия: входной текст содержит специальные символы и пробелы\nШаги:\n1. Вызвать функцию decode с аргументом char = \"!@#$%^&*()_+ -=[]{}|;\\:',.<>?\".\n2. Получить результат декодирования.\nОжидаемый результат: функция возвращает исходную строку \"!@#$%^&*()_+ -=[]{}|;\\:',.<>?\", так как специальные символы и пробелы не изменяются при декодировании.\n\nНазвание: Проверка декодирования пустого текста\nID: TC-Atbash-Decode-03\nПредусловия: входной текст пуст\nШаги:\n1. Вызвать функцию decode с аргументом char = \"\".\n2. Получить результат декодирования.\nОжидаемый результат: функция возвращает пустую строку \"\".\n\nНазвание: Проверка декодирования текста, состоящего только из заглавных букв\nID: TC-Atbash-Decode-04\nПредусловия: входной текст состоит только из заглавных букв\nШаги:\n1. Вызвать функцию decode с аргументом char = \"HELLOWORLD\".\n2. Получить результат декодирования.\nОжидаемый результат: функция возвращает строку \"SVOOLDLIOW\".\n\nНазвание: Проверка декодирования текста, состоящего только из строчных букв\nID: TC-Atbash-Decode-05\nПредусловия: входной текст состоит только из строчных букв\nШаги:\n1. Вызвать функцию decode с аргументом char = \"helloworld\".\n2. Получить результат декодирования.\nОжидаемый результат: функция возвращает строку \"svool dliow\""
    },
    {
        "llm_name": "LLama 3.2 8B",
        "function_type": "atbash",
        "response_text": "* Название: Тест-каис «Декодирование заголовка»\n* ID: test_atbash_001\n* Предусловия:\n - char — строка, содержащая только заглавные буквы (A-Z).\n\nШаги:\n1. Инициализировать Atbash_translated с empty.\n2. Выполнить decode на char и присвоить результат Atbash_translated.\n3. Проверить, что Atbash_translated равно 'Z'.\n\nОжидаемый результат:\n - Результат Atbash_translated равен 'Z'.\n\n* Название: Тест-каис «Декодирование заголовка с разных букв»\n* ID: test_atbash_002\n* Предусловия:\n - char — строка, содержащая различные заглавные буквы (A-Z).\n\nШаги:\n1. Инициализировать Atbash_translated с empty.\n2. Выполнить decode на char и присвоить результат Atbash_translated.\n3. Проверить, что Atbash_translated содержит 'Z', 'Y', 'X' и так далее по A.\n\nОжидаемый результат:\n - Результат Atbash_translated должен содержать 'Z', 'Y', 'X' и так далее по А.\n\n* Название: Тест-каис «Декодирование заголовка с нижним буквом»\n* ID: test_atbash_003\n* Предусловия:\n - char — строка, содержащая только нижние буквы (a-z).\n\nШаги:\n1. Инициализировать Atbash_translated с empty.\n2. Выполнить decode на char и присвоить результат Atbash_translated.\n3. Проверить, что Atbash_translated равно 'z'.\n\nОжидаемый результат:\n - Результат Atbash_translated равен 'z'.\n\n* Название: Тест-каис «Декодирование заголовка с mixed_case»\n* ID: test_atbash_004\n* Предусловия:\n - char — строка, содержащая mix_case буквы (AaZz).\n\nШаги:\n1. Инициализировать Atbash_translated с empty.\n2. Выполнить decode на char и присвоить результат Atbash_translated.\n3. Проверить, что Atbash_translated содержит 'Z' для A, 'Y' для a, 'X' для Z и так далее по A.\n\nОжидаемый результат:\n - Результат Atbash_translated должен содержать 'Z' для A, 'Y' для a, 'X' для Z и так далее по А."
    },
    {
        "llm_name": "DeepSeek V3",
        "function_type": "harris_benedict",
        "response_text": "**Название:** Проверка расчета BMR для мужчины\n**ID:** TC_HB_001\n**Предусловия:**\n- Пользователь: мужчина (gender = 'M')\n- Вес: 70 кг\n- Рост: 175 см\n- Возраст: 30 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'M', 70, 175, 30\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n66.47 + 13.75*70 + 5.003*175 - 6.755*30 = 1663.075 ≈ 1663.08\n\n**Название:** Проверка расчета BMR для женщины\n**ID:** TC_HB_002\n**Предусловия:**\n- Пользователь: женщина (gender = 'F')\n- Вес: 60 кг\n- Рост: 165 см\n- Возраст: 25 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'F', 60, 165, 25\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n655.1 + 9.563*60 + 1.850*165 - 4.676*25 = 1385.29 ≈ 1385.29\n\n**Название:** Проверка обработки строчного регистра пола\n**ID:** TC_HB_003\n**Предусловия:**\n- Пользователь: мужчина (gender = 'm')\n- Вес: 80 кг\n- Рост: 180 см\n- Возраст: 40 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'm', 80, 180, 40\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n66.47 + 13.75*80 + 5.003*180 - 6.755*40 = 1744.39 ≈ 1744.39\n\n**Название:** Проверка минимальных допустимых значений\n**ID:** TC_HB_004\n**Предусловия:**\n- Пользователь: женщина (gender = 'F')\n- Вес: 30 кг (минимальный разумный вес)\n- Рост: 140 см\n- Возраст: 18 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'F', 30, 140, 18\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n655.1 + 9.563*30 + 1.850*140 - 4.676*18 = 1123.332 ≈ 1123.33\n\n**Название:** Проверка максимальных допустимых значений\n**ID:** TC_HB_005\n**Предусловия:**\n- Пользователь: мужчина (gender = 'M')\n- Вес: 150 кг\n- Рост: 220 см\n- Возраст: 100 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'M', 150, 220, 100\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n66.47 + 13.75*150 + 5.003*220 - 6.755*100 = 1930.91 ≈ 1930.91\n\n**Название:** Проверка обработки невалидного значения пола\n**ID:** TC_HB_006\n**Предусловия:**\n- Пользователь: неопределенный пол (gender = 'X')\n- Вес: 70 кг\n- Рост: 175 см\n- Возраст: 30 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'X', 70, 175, 30\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n655.1 + 9.563*70 + 1.850*175 - 4.676*30 = 1485.76 ≈ 1485.76\n\n**Название:** Проверка точности расчетов с дробными значениями\n**ID:** TC_HB_007\n**Предусловия:**\n- Пользователь: женщина (gender = 'F')\n- Вес: 58.5 кг\n- Рост: 162.3 см\n- Возраст: 32.5 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'F', 58.5, 162.3, 32.5\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n655.1 + 9.563*58.5 + 1.850*162.3 - 4.676*32.5 ≈ 1346.83\n\n**Название:** Проверка обработки нулевых параметров\n**ID:** TC_HB_008\n**Предусловия:**\n- Пользователь: мужчина (gender = 'M')\n- Вес: 0 кг\n- Рост: 0 см\n- Возраст: 0 лет\n\n**Шаги:**\n1. Создать объект User с параметрами: 'M', 0, 0, 0\n2. Вызвать calculate(user)\n\n**Ожидаемый результат:**\n66.47 + 13.75*0 + 5.003*0 - 6.755*0 = 66.47"
    },
    {
        "llm_name": "ChatGPT-4o",
        "function_type": "harris_benedict",
        "response_text": "Название: Корректный расчет BMR для мужчины\nID: TC_BMR_001\nПредусловия:\n• Пользователь: пол M, вес 70 кг, рост 175 см, возраст 25 лет\n• Ожидаемая формула:\n66.47 + 13.75 * 70 + 5.003 * 175 - 6.755 * 25 = 66.47 + 962.5 + 875.525 - 168.875 = 1735.62\nШаги:\n1. Создать объект User с параметрами gender = 'M', weight = 70, height = 175, age = 25\n2. Вызвать метод calculate(user)\n3. Получить результат\nОжидаемый результат:\n1735.62 (±0.01 в зависимости от точности вычислений)\n\nНазвание: Корректный расчет BMR для женщины\nID: TC_BMR_002\nПредусловия:\n• Пользователь: пол F, вес 60 кг, рост 165 см, возраст 30 лет\n• Ожидаемая формула:\n655.1 + 9.563 * 60 + 1.850 * 165 - 4.676 * 30 = 655.1 + 573.78 + 305.25 - 140.28 = 1393.85\nШаги:\n1. Создать объект User с параметрами gender = 'F', weight = 60, height = 165, age = 30\n2. Вызвать метод calculate(user)\n3. Получить результат\nОжидаемый результат:\n1393.85 (±0.01)\n\nНазвание: Расчет BMR с регистронезависимым полом\nID: TC_BMR_003\nПредусловия:\n• Пользователь: пол m, вес 80 кг, рост 180 см, возраст 40 лет\n• Ожидаемая формула:\n66.47 + 13.75 * 80 + 5.003 * 180 - 6.755 * 40\nШаги:\n1. Создать объект User с gender = 'm', weight = 80, height = 180, age = 40\n2. Вызвать метод calculate(user)\n3. Получить результат\nОжидаемый результат:\nКорректное BMR по мужской формуле (около 1774.41)\n\nНазвание: Расчет BMR с возрастом 0\nID: TC_BMR_004\nПредусловия:\n• Пользователь: gender = 'F', weight = 50, height = 150, age = 0\n• Формула: 655.1 + 9.563 * 50 + 1.850 * 150\nШаги:\n1. Создать User с age = 0\n2. Вызвать calculate(user)\n3. Получить результат\nОжидаемый результат:\n655.1 + 478.15 + 277.5 = 1410.75\n\nНазвание: Расчет BMR при некорректном значении пола\nID: TC_BMR_005\nПредусловия:\n• gender = 'X', weight = 65, height = 170, age = 28\n• Функция должна использовать женскую формулу по умолчанию\nШаги:\n1. Создать User с gender = 'X'\n2. Вызвать calculate(user)\n3. Получить результат\nОжидаемый результат:\nРасчет по формуле для женщин (≈ 1353.5)\n\nНазвание: Граничные значения: вес и рост равны 0\nID: TC_BMR_006\nПредусловия:\n• gender = 'M', weight = 0, height = 0, age = 25\n• Ожидаемая формула: 66.47 - 6.755 * 25\nШаги:\n1. Создать User с weight = 0, height = 0, age = 25\n2. Вызвать calculate(user)\n3. Получить результат\nОжидаемый результат:\n66.47 - 168.875 = -102.405\n\nНазвание: Проверка вычислений с дробными параметрами\nID: TC_BMR_007\nПредусловия:\n• gender = 'F', weight = 52.3, height = 162.5, age = 26.4\nШаги:\n1. Создать User с дробными значениями\n2. Вызвать calculate(user)\n3. Получить результат\nОжидаемый результат:\nКорректное вычисление BMR с учетом всех дробных значений (например, около 1367.82 — зависит от точной формулы)"
    },
    {
        "llm_name": "Claude Sonnet 4",
        "function_type": "harris_benedict",
        "response_text": "Название: Проверка корректного расчета BMR для мужчины с типичными физическими параметрами\nID: TC_HARRIS_BENEDICT_001\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с мужским полом и стандартными параметрами\n• Параметры пользователя: пол = 'M', вес = 80 кг, рост = 180 см, возраст = 30 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 80, height = 180, age = 30\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить корректность вычисления по формуле для мужчин\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 80 + 5.003 * 180 - 6.755 * 30\nBMR = 66.47 + 1100 + 900.54 - 202.65 = 1864.36\n\nНазвание: Проверка корректного расчета BMR для женщины с типичными физическими параметрами\nID: TC_HARRIS_BENEDICT_002\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с женским полом и стандартными параметрами\n• Параметры пользователя: пол = 'F', вес = 65 кг, рост = 165 см, возраст = 25 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 65, height = 165, age = 25\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить корректность вычисления по формуле для женщин\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 65 + 1.850 * 165 - 4.676 * 25\nBMR = 655.1 + 621.595 + 305.25 - 116.9 = 1465.045\n\nНазвание: Проверка обработки пола мужчины в нижнем регистре\nID: TC_HARRIS_BENEDICT_003\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с полом 'm' (нижний регистр)\n• Параметры пользователя: пол = 'm', вес = 75 кг, рост = 175 см, возраст = 35 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'm', weight = 75, height = 175, age = 35\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить, что используется мужская формула\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 75 + 5.003 * 175 - 6.755 * 35\nBMR = 66.47 + 1031.25 + 875.525 - 236.425 = 1736.82\n\nНазвание: Проверка обработки пола женщины в нижнем регистре\nID: TC_HARRIS_BENEDICT_004\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с полом не равным 'M' или 'm'\n• Параметры пользователя: пол = 'f', вес = 60 кг, рост = 160 см, возраст = 28 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'f', weight = 60, height = 160, age = 28\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить, что используется женская формула (default case)\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 60 + 1.850 * 160 - 4.676 * 28\nBMR = 655.1 + 573.78 + 296 - 130.928 = 1393.952\n\nНазвание: Проверка расчета с минимальными физиологически возможными параметрами\nID: TC_HARRIS_BENEDICT_005\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с минимальными параметрами\n• Параметры пользователя: пол = 'M', вес = 30 кг, рост = 100 см, возраст = 1 год\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 30, height = 100, age = 1\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить, что результат положительный\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 30 + 5.003 * 100 - 6.755 * 1\nBMR = 66.47 + 412.5 + 500.3 - 6.755 = 972.515\n\nНазвание: Проверка расчета с максимальными физиологически возможными параметрами\nID: TC_HARRIS_BENEDICT_006\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с максимальными параметрами\n• Параметры пользователя: пол = 'F', вес = 200 кг, рост = 250 см, возраст = 100 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 200, height = 250, age = 100\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить корректность вычисления для экстремальных значений\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 200 + 1.850 * 250 - 4.676 * 100\nBMR = 655.1 + 1912.6 + 462.5 - 467.6 = 2562.6\n\nНазвание: Проверка обработки нулевых значений физических параметров\nID: TC_HARRIS_BENEDICT_007\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с нулевыми параметрами\n• Параметры пользователя: пол = 'M', вес = 0 кг, рост = 0 см, возраст = 0 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 0, height = 0, age = 0\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить результат расчета\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 0 + 5.003 * 0 - 6.755 * 0\nBMR = 66.47\n\nНазвание: Проверка обработки отрицательных значений физических параметров\nID: TC_HARRIS_BENEDICT_008\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с отрицательными параметрами\n• Параметры пользователя: пол = 'F', вес = -10 кг, рост = -5 см, возраст = -2 года\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = -10, height = -5, age = -2\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить математический результат (может быть нереалистичным)\nОжидаемый результат:\nBMR = 655.1 + 9.563 * (-10) + 1.850 * (-5) - 4.676 * (-2)\nBMR = 655.1 - 95.63 - 9.25 + 9.352 = 559.572\n\nНазвание: Проверка корректной обработки дробных значений\nID: TC_HARRIS_BENEDICT_009\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с дробными параметрами\n• Параметры пользователя: пол = 'M', вес = 75.5 кг, рост = 177.8 см, возраст = 32.5 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 75.5, height = 177.8, age = 32.5\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить точность вычислений с плавающей точкой\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 75.5 + 5.003 * 177.8 - 6.755 * 32.5\nBMR = 66.47 + 1038.125 + 889.5334 - 219.5375 = 1774.5909\n\nНазвание: Проверка обработки неопределенного или неправильного пола\nID: TC_HARRIS_BENEDICT_010\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с неопределенным полом\n• Параметры пользователя: пол = 'X', вес = 70 кг, рост = 170 см, возраст = 25 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'X', weight = 70, height = 170, age = 25\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить, что используется женская формула (default case)\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 70 + 1.850 * 170 - 4.676 * 25\nBMR = 655.1 + 669.41 + 314.5 - 116.9 = 1522.11\n\nНазвание: Проверка расчета для очень пожилого возраста\nID: TC_HARRIS_BENEDICT_011\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с очень большим возрастом\n• Параметры пользователя: пол = 'F', вес = 50 кг, рост = 150 см, возраст = 90 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 50, height = 150, age = 90\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить, что результат остается положительным\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 50 + 1.850 * 150 - 4.676 * 90\nBMR = 655.1 + 478.15 + 277.5 - 420.84 = 989.91\n\nНазвание: Проверка расчета для человека с очень низкими параметрами\nID: TC_HARRIS_BENEDICT_012\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с очень низкими параметрами\n• Параметры пользователя: пол = 'M', вес = 40 кг, рост = 120 см, возраст = 20 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 40, height = 120, age = 20\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить корректность расчета для малых значений\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 40 + 5.003 * 120 - 6.755 * 20\nBMR = 66.47 + 550 + 600.36 - 135.1 = 1081.73\n\nНазвание: Проверка расчета для человека с очень высокими параметрами\nID: TC_HARRIS_BENEDICT_013\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с очень высокими параметрами\n• Параметры пользователя: пол = 'M', вес = 150 кг, рост = 220 см, возраст = 40 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 150, height = 220, age = 40\n2. Вызвать функцию calculate(user)\n3. Получить результат расчета BMR\n4. Проверить корректность для больших значений\nОжидаемый результат:\nBMR = 66.47 + 13.75 * 150 + 5.003 * 220 - 6.755 * 40\nBMR = 66.47 + 2062.5 + 1100.66 - 270.2 = 2959.43\n\nНазвание: Проверка точности вычислений с типом double\nID: TC_HARRIS_BENEDICT_014\nПредусловия:\n• Функция calculate доступна для вызова\n• Создан объект User с параметрами, дающими дробный результат\n• Параметры пользователя: пол = 'F', вес = 62.7 кг, рост = 168.3 см, возраст = 27.8 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 62.7, height = 168.3, age = 27.8\n2. Вызвать функцию calculate(user) несколько раз\n3. Проверить стабильность результата\n4. Проверить точность до нескольких знаков после запятой\nОжидаемый результат:\nBMR = 655.1 + 9.563 * 62.7 + 1.850 * 168.3 - 4.676 * 27.8\nBMR = 655.1 + 599.6001 + 311.355 - 129.9928 = 1436.0623\nРезультат должен быть стабильным при повторных вызовах\n\nНазвание: Проверка обработки различных символов пола\nID: TC_HARRIS_BENEDICT_015\nПредусловия:\n• Функция calculate доступна для вызова\n• Подготовлены объекты User с различными символами пола\n• Базовые параметры: вес = 70 кг, рост = 170 см, возраст = 30 лет\nШаги:\n1. Создать объекты User с разными значениями gender: 'M', 'm', 'F', 'f', '0', ' ', '\\0'\n2. Вызвать calculate для каждого объекта\n3. Сравнить результаты\n4. Проверить, какие используют мужскую, а какие женскую формулу\nОжидаемый результат:\ngender = 'M': мужская формула\ngender = 'm': мужская формула\ngender = 'F': женская формула\ngender = 'f': женская формула\ngender = '0': женская формула\ngender = ' ': женская формула\ngender = '\\0': женская формула"
    },
    {
        "llm_name": "Mistral 3B",
        "function_type": "harris_benedict",
        "response_text": "Название: Расчет BMR для мужчины с нормальными показателями\nID: TC-HB-001\nПредусловия: Пользователь мужского пола с весом 70 кг, ростом 175 см и возрастом 30 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'M', weight = 70, height = 175, age = 30.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле: 66.47 + 13.75 * 70 + 5.003 * 175 - 6.755 * 30.\n\nНазвание: Расчет BMR для женщины с нормальными показателями\nID: TC-HB-002\nПредусловия: Пользователь женского пола с весом 60 кг, ростом 165 см и возрастом 25 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'F', weight = 60, height = 165, age = 25.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле: 655.1 + 9.563 * 60 + 1.850 * 165 - 4.676 * 25.\n\nНазвание: Расчет BMR для мужчины с минимальными показателями\nID: TC-HB-003\nПредусловия: Пользователь мужского пола с весом 50 кг, ростом 150 см и возрастом 20 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'm', weight = 50, height = 150, age = 20.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле: 66.47 + 13.75 * 50 + 5.003 * 150 - 6.755 * 20.\n\nНазвание: Расчет BMR для женщины с максимальными показателями\nID: TC-HB-004\nПредусловия: Пользователь женского пола с весом 100 кг, ростом 180 см и возрастом 50 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'f', weight = 100, height = 180, age = 50.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле: 655.1 + 9.563 * 100 + 1.850 * 180 - 4.676 * 50.\n\nНазвание: Проверка на некорректный пол\nID: TC-HB-005\nПредусловия: Пользователь с неопределенным полом, весом 70 кг, ростом 175 см и возрастом 30 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'X', weight = 70, height = 175, age = 30.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле для женщин: 655.1 + 9.563 * 70 + 1.850 * 175 - 4.676 * 30.\n\nНазвание: Проверка на нулевые значения\nID: TC-HB-006\nПредусловия: Пользователь мужского пола с весом 0 кг, ростом 0 см и возрастом 0 лет.\nШаги:\n1. Вызвать функцию calculate с параметрами: gender = 'M', weight = 0, height = 0, age = 0.\nОжидаемый результат: Функция должна вернуть значение, соответствующее формуле: 66.47 + 13.75 * 0 + 5.003 * 0 - 6.755 * 0."
    },
    {
        "llm_name": "YandexGPT 5Pro",
        "function_type": "harris_benedict",
        "response_text": "Название: Проверка расчёта BMR для мужчины\nID: TC-HarrisBenedict-Male-01\nПредусловия: пользователь — мужчина с весом 80 кг, ростом 175 см и возрастом 30 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 80, height = 175, age = 30.\n2. Вызвать функцию calculate с объектом User в качестве аргумента.\n3. Получить результат расчёта BMR.\nОжидаемый результат: функция возвращает значение BMR, равное приблизительно 1743.85.\n\nНазвание: Проверка расчёта BMR для женщины\nID: TC-HarrisBenedict-Female-02\nПредусловия: пользователь — женщина с весом 60 кг, ростом 160 см и возрастом 25 лет\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 60, height = 160, age = 25.\n2. Вызвать функцию calculate с объектом User в качестве аргумента.\n3. Получить результат расчёта BMR.\nОжидаемый результат: функция возвращает значение BMR, равное приблизительно 1348.45.\n\nНазвание: Проверка обработки некорректного пола пользователя\nID: TC-HarrisBenedict-InvalidGender-03\nПредусловия: пользователь с некорректным значением пола (например, 'X')\nШаги:\n1. Создать объект User с параметрами: gender = 'X', weight = 70, height = 180, age = 40.\n2. Вызвать функцию calculate с объектом User в качестве аргумента.\n3. Проверить обработку некорректного значения пола.\nОжидаемый результат: функция должна корректно обработать некорректное значение пола, возможно, вернув ошибку или используя формулу для одного из полов по умолчанию.\n\nНазвание: Проверка расчёта BMR для подростка\nID: TC-HarrisBenedict-Teenager-04\nПредусловия: пользователь — подросток (возраст 16 лет) с весом 75 кг и ростом 170 см\nШаги:\n1. Создать объект User с параметрами: gender = 'M', weight = 75, height = 170, age = 16.\n2. Вызвать функцию calculate с объектом User в качестве аргумента.\n3. Получить результат расчёта BMR.\nОжидаемый результат: функция возвращает значение BMR, рассчитанное по формуле для указанного возраста.\n\nНазвание: Проверка расчёта BMR для пожилого человека\nID: TC-HarrisBenedict-Elderly-05\nПредусловия: пользователь — пожилой человек (возраст 70 лет) с весом 90 кг и ростом 165 см\nШаги:\n1. Создать объект User с параметрами: gender = 'F', weight = 90, height = 165, age = 70.\n2. Вызвать функцию calculate с объектом User в качестве аргумента.\n3. Получить результат расчёта BMR.\nОжидаемый результат: функция возвращает значение BMR, рассчитанное по формуле для указанного возраста."
    },
    {
        "llm_name": "LLama 3.2 8B",
        "function_type": "harris_benedict",
        "response_text": "* Название: Тест-каис «Рассчет BMR для мужчины»\nID: test_HarrisBenedict_001\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.gender равен 'M' или 'm'.\n - user.weight, user.height и user.age существуют в проекте.\n\nШаги:\n1. Инициализировать user сgender='M', weight=70, height=175, age=30.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 2040,05.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 2040,05.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Рассчет BMR для женщины»\nID: test_HarrisBenedict_002\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.gender равен 'F' или 'f'.\n - user.weight, user.height и user.age существуют в проекте.\n\nШаги:\n1. Инициализировать user сgender='F', weight=55, height=160, age=25.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 1738,56.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 1738,56.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Нулевое значение веса»\nID: test_HarrisBenedict_003\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.weight равно 0.\n\nШаги:\n1. Инициализировать user с weight=0, height=180, age=40.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 655.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 655.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Отрицательное значение веса»\nID: test_HarrisBenedict_004\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.weight равно -10.\n\nШаги:\n1. Инициализировать user с weight=-10, height=150, age=35.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR отрицательно.\n4. Проверить, что значение BMR является числом.\n\nОжидаемый результат:\n - Результат BMR отрицательным числом.\n - Результат BMR является числом.\n\n* Название: Тест-каис «Нулевое значение высоты»\nID: test_HarrisBenedict_005\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.height равно 0.\n\nШаги:\n1. Инициализировать user с height=0, weight=60, age=28.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 655.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 655.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Нулевое значение возраста»\nID: test_HarrisBenedict_006\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.age равно 0.\n\nШаги:\n1. Инициализировать user с age=0, weight=70, height=175, gender='M'.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 66,47.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 66,47.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Случай с неправильным полом»\nID: test_HarrisBenedict_007\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.gender равно 'X' или 'x'.\n\nШаги:\n1. Инициализировать user с gender='X', weight=60, height=165, age=30.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR отрицательно.\n4. Проверить, что значение BMR является числом.\n\nОжидаемый результат:\n - Результат BMR отрицательным числом.\n - Результат BMR является числом.\n\n* Название: Тест-каис «Случай с нулевым весом и высоким возрастом»\nID: test_HarrisBenedict_008\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.weight равно 0.\n - user.age >= 80.\n\nШаги:\n1. Инициализировать user с weight=0, height=170, age=85.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 655.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 655.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Случай с низким весом и высоким возрастом»\nID: test_HarrisBenedict_009\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.weight < 50.\n - user.age >= 80.\n\nШаги:\n1. Инициализировать user с weight=40, height=165, age=85.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR равно 655.\n4. Проверить, что значение BMR является положительным числом.\n\nОжидаемый результат:\n - Результат BMR равен 655.\n - Результат BMR является положительным числом.\n\n* Название: Тест-каис «Случай с высоким весом и низким возрастом»\nID: test_HarrisBenedict_010\nПредусловия:\n - User существует и имеет уникальный ID.\n - user.weight > 100.\n - user.age < 20.\n\nШаги:\n1. Инициализировать user с weight=120, height=160, age=15.\n2. Выполнить функцию `calculate` и получить результат BMR.\n3. Проверить, что значение BMR отрицательно.\n4. Проверить, что значение BMR является числом.\n\nОжидаемый результат:\n - Результат BMR отрицательным числом.\n - Результат BMR является числом."
    }
]